Deploying Spring Boot WAR file with JSP on AWS
by Chad Darby

Deploy Spring Boot apps with JSP to AWS Elastic Beanstalk

You can deploy a Spring Boot application using JSP to AWS Elastic Beanstalk. In this scenario, we will create a WAR file and deploy the WAR to the Tomcat server running on Elastic Beanstalk. This is known as a traditional deployment.



High-level steps

1. Update main Spring Boot application

2. Update Maven POM file

3. Update application.properties

4. Move JSP view files to WEB-INF/view

5. Create WAR file

6. Deploy to AWS Elastic Beanstalk



Spring Boot Reference Manual

For full details on this process, see the Spring Boot Reference Manual: Section 92.1 Creating a Deployable WAR file



Working Example

I have a full working project. You can download this app and perform test deployments to AWS

Download: deploy-spring-boot-and-jsp-on-aws-elastic-beanstalk.zip



This app is a very simple helloworld example that exposes a "/test" request mapping

package org.demo.bootjsp.controller;
 
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
 
@Controller
public class HelloWorldController {
 
	@RequestMapping("/test")
	public String sayHello() {
		return "hello";
	}
	
}


and a simple JSP page: hello.jsp

<html><body>
 
<p>
Hello World! Time is <%= new java.util.Date() %>
</p>
 
<p>
We are running on Elastic Beanstalk!!
</p>
 
</body></html>
----

Detailed steps



1. Update main Spring Boot application

In your main Spring Boot application, you need to

a. extend the SpringBootServletInitializer

b. override the configure(...) method



Your code should look like this

package org.demo.bootjsp;
 
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;
 
@SpringBootApplication
public class DemowebApplication extends SpringBootServletInitializer {
 
	@Override
	protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
		return application.sources(DemowebApplication.class);
	}
 
	public static void main(String[] args) {
		SpringApplication.run(DemowebApplication.class, args);
	}
 
}


2. Update Maven POM file

Update your POM.xml to use WAR packaging

<packaging>war</packaging>



In POM.xml, add dependency to be able to compile JSPs

		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>


Make sure the Tomcat embedded does not interfere with external Tomcat server

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>


3. Update application.properties

In your application.properties file, you should have

spring.mvc.view.prefix=/WEB-INF/view/
spring.mvc.view.suffix=.jsp


4. Move JSP view files to WEB-INF/view

Move your JSP view pages should to src/main/webapp/WEB-INF/view



5. Create WAR file

Create the WAR file with the command: mvn clean package



6. Deploy to AWS Elastic Beanstalk

In AWS Elastic Beanstalk,

a. Create New Application

b. Create New Environment: select Web server environment

c. In Base Configuration section, select Preconfigured platform > Tomcat

d. Upload your WAR file from your project

e. Continue steps to deploy

f. Once deployed, Visit the app URL:  http:<<your-aws-url>>/test     (be sure to append "/test")



You will see the helloworld page. Congrats!

